/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main.java;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;

import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.util.concurrent.ThreadFactory;
import com.google.zxing.common.HybridBinarizer;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import java.util.TimeZone;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Calendar;

public class ReadQrcode extends javax.swing.JFrame implements Runnable,ThreadFactory {
    
    private WebcamPanel panel = null;
    private Webcam webcam = null;
    private Executor executor = Executors.newSingleThreadExecutor(this);
    
    
    public static class Function{
        
        Connection conn = null;
        ResultSet rs;
        PreparedStatement ps = null;
        final String DB_URL = "jdbc:mysql://localhost/finalprojectdb?serverTimezone=Asia/Manila";
        final String USERNAME = "root";
        final String PASSWORD = "";

       public ResultSet find(String s) throws SQLException {
            try {
                conn = DriverManager.getConnection(DB_URL, USERNAME, PASSWORD);
                ps = conn.prepareStatement("select * from equipmentinventory where id = ?");
                ps.setString(1,s);
                rs = ps.executeQuery();
            } catch (Exception e){
                e.printStackTrace();
            }
            return rs;
        }
    
    }
    /**
     * Creates new form ReadQrcode
     */
    
    public String eme;
    
    public ReadQrcode(String eme) {
        initComponents();
        initWebcam();
        setTitle("QR Code Scanner");
        setLocationRelativeTo(null);
        setVisible(true);
        this.eme = eme;
        

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        exitBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        idTF = new javax.swing.JTextField();
        equipTF = new javax.swing.JTextField();
        statusTF = new javax.swing.JTextField();
        nameTF = new javax.swing.JTextField();
        useTF = new javax.swing.JTextField();
        scanBtn = new javax.swing.JButton();
        availBtn = new javax.swing.JButton();
        returnBtn = new javax.swing.JButton();
        checkBtn = new javax.swing.JButton();
        borrowBtn = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, 180, 180));

        jLabel2.setFont(new java.awt.Font("Couture", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("BORROWING SYSTEM");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 120, -1, 38));

        jLabel8.setFont(new java.awt.Font("Couture", 0, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Laboratory Equipment ");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 90, -1, 38));

        exitBtn.setBackground(new java.awt.Color(255, 255, 255));
        exitBtn.setFont(new java.awt.Font("Quarion", 1, 14)); // NOI18N
        exitBtn.setForeground(new java.awt.Color(0, 0, 0));
        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });
        jPanel1.add(exitBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 380, -1, -1));

        jLabel3.setFont(new java.awt.Font("Bebas Neue", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("equipment name:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 200, -1, 30));

        jLabel4.setFont(new java.awt.Font("Bebas Neue", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("in use/not:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 320, -1, 30));

        jLabel6.setFont(new java.awt.Font("Bebas Neue", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("borrower name:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 280, -1, 30));

        jLabel7.setFont(new java.awt.Font("Bebas Neue", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("status:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 240, -1, 30));

        jLabel5.setFont(new java.awt.Font("Bebas Neue", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("ID:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 160, -1, 30));

        idTF.setEditable(false);
        idTF.setFont(new java.awt.Font("Proxima Nova Alt Lt", 0, 14)); // NOI18N
        idTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idTFActionPerformed(evt);
            }
        });
        jPanel1.add(idTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 160, 250, -1));

        equipTF.setEditable(false);
        equipTF.setFont(new java.awt.Font("Proxima Nova Alt Lt", 0, 14)); // NOI18N
        equipTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equipTFActionPerformed(evt);
            }
        });
        jPanel1.add(equipTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 200, 250, -1));

        statusTF.setEditable(false);
        statusTF.setFont(new java.awt.Font("Proxima Nova Alt Lt", 0, 14)); // NOI18N
        jPanel1.add(statusTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 240, 250, -1));

        nameTF.setFont(new java.awt.Font("Proxima Nova Alt Lt", 0, 14)); // NOI18N
        nameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTFActionPerformed(evt);
            }
        });
        jPanel1.add(nameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 280, 250, -1));

        useTF.setEditable(false);
        useTF.setFont(new java.awt.Font("Proxima Nova Alt Lt", 0, 14)); // NOI18N
        jPanel1.add(useTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 320, 250, -1));

        scanBtn.setBackground(new java.awt.Color(255, 255, 255));
        scanBtn.setFont(new java.awt.Font("Quarion", 1, 14)); // NOI18N
        scanBtn.setForeground(new java.awt.Color(0, 0, 0));
        scanBtn.setText("Scan");
        scanBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanBtnActionPerformed(evt);
            }
        });
        jPanel1.add(scanBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 380, -1, -1));

        availBtn.setBackground(new java.awt.Color(255, 255, 255));
        availBtn.setFont(new java.awt.Font("Quarion", 1, 14)); // NOI18N
        availBtn.setForeground(new java.awt.Color(0, 0, 0));
        availBtn.setText("Show List");
        availBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availBtnActionPerformed(evt);
            }
        });
        jPanel1.add(availBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 350, -1, -1));

        returnBtn.setBackground(new java.awt.Color(255, 255, 255));
        returnBtn.setFont(new java.awt.Font("Quarion", 1, 14)); // NOI18N
        returnBtn.setForeground(new java.awt.Color(0, 0, 0));
        returnBtn.setText("Return");
        returnBtn.setEnabled(false);
        returnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBtnActionPerformed(evt);
            }
        });
        jPanel1.add(returnBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 350, -1, -1));

        checkBtn.setBackground(new java.awt.Color(255, 255, 255));
        checkBtn.setFont(new java.awt.Font("Quarion", 1, 14)); // NOI18N
        checkBtn.setForeground(new java.awt.Color(0, 0, 0));
        checkBtn.setText("Check");
        checkBtn.setEnabled(false);
        checkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBtnActionPerformed(evt);
            }
        });
        jPanel1.add(checkBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 350, -1, -1));

        borrowBtn.setBackground(new java.awt.Color(255, 255, 255));
        borrowBtn.setFont(new java.awt.Font("Quarion", 1, 14)); // NOI18N
        borrowBtn.setForeground(new java.awt.Color(0, 0, 0));
        borrowBtn.setText("Borrow");
        borrowBtn.setEnabled(false);
        borrowBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrowBtnActionPerformed(evt);
            }
        });
        jPanel1.add(borrowBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 350, -1, -1));

        jLabel10.setFont(new java.awt.Font("BookmanOldStyleProCyrW04-Rg", 0, 32)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("BATANGAS STATE UNIVERSITY");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, -1, 50));

        jLabel11.setFont(new java.awt.Font("BookmanOldStyleProCyrW04-Rg", 0, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("The National Engineering University");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 60, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/java/images/Artboard 1.png"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 740, 420));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed

    private void equipTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equipTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_equipTFActionPerformed

    private void borrowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrowBtnActionPerformed
        useTF.setText("Yes");
        String inuse= useTF.getText();
        String status = statusTF.getText();
        String borrower = nameTF.getText();
        String equipment = equipTF.getText();
        String borrowed = "Borrowed";
        String srcode = eme;
        
        
                try {
            // 5. Get Equipment ID (from text field or other source)
            String id = idTF.getText();

            // Check if equipment is already in use (optional but recommended)
            String checkInUseQuery = "SELECT INUSE FROM equipmentinventory WHERE ID = ?";
            PreparedStatement checkInUsePs = Myconnection.getConnection().prepareStatement(checkInUseQuery);
            checkInUsePs.setString(1, id);
            ResultSet checkInUseRs = checkInUsePs.executeQuery();

            String isInUse = null;
            if (checkInUseRs.next()) {
                isInUse = checkInUseRs.getString("INUSE");
            }

            // Update database based on equipment availability
            if (isInUse != null && isInUse.equals("Yes")) {
                // Equipment already in use, update existing record (update logic remains the same)
                // ... existing update code for equipmentinventory ...
            } else {
                // Equipment not in use, insert new record in equipmentinventory (update logic)
                String updateQuery = "UPDATE `equipmentinventory` SET `INUSE` = ?, `BORROWER` = ?  WHERE `equipmentinventory`.`ID` = ?";
                PreparedStatement updatePs = Myconnection.getConnection().prepareStatement(updateQuery);
                updatePs.setString(1, "Yes");
                updatePs.setString(2, borrower);// Set equipment to in use
                updatePs.setString(3, id);

                if (updatePs.executeUpdate() != 0) {
                    TimeZone manilaTimeZone = TimeZone.getTimeZone("Asia/Manila");
                    Calendar calendar = Calendar.getInstance(manilaTimeZone);
                    Timestamp pstTimestamp = new Timestamp(calendar.getTimeInMillis());
                    Calendar pstCalendar = Calendar.getInstance();
                    pstCalendar.setTimeInMillis(pstTimestamp.getTime());
                    pstCalendar.setTimeZone(manilaTimeZone);
                    Timestamp pstTimestampInManila = new Timestamp(pstCalendar.getTimeInMillis());
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    String date = sdf.format(pstTimestampInManila);
                    // Update successful, proceed with borrow history insertion
                    String insertBorrowHistory = "INSERT INTO `borrowhistory` (`BORROWER`, `EQUIPMENT`, `SRCODE`, `DATE`, `BR/RT`) VALUES (?, ?, ?, ?, ?)";
                    PreparedStatement insertPs = Myconnection.getConnection().prepareStatement(insertBorrowHistory);
                    insertPs.setString(1, borrower); // Borrower SR goes into borrowhistory
                    insertPs.setString(2, equipment);
                    insertPs.setString(3, srcode);
                    insertPs.setString(4, date); // Insert current date/time
                    insertPs.setString(5, borrowed);

                    if (insertPs.executeUpdate() != 0) {
                        UIManager.put("OptionPane.okButtonText", "Ok");
                        JOptionPane.showMessageDialog(null, "Equipment borrowed successfully!");
                        webcam.close();
                        this.setVisible(false);// Assuming webcam is used for QR code scanning, close it after successful update
                    } else {
                        JOptionPane.showMessageDialog(null, "Error inserting borrow history!");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Error updating equipment status!");
                }
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
       
    }                                    
StudentLogin login = new StudentLogin();
                login.setVisible(true);
                this.setVisible(false); 
    }//GEN-LAST:event_borrowBtnActionPerformed

    private void idTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idTFActionPerformed

    private void scanBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanBtnActionPerformed
        setTitle("Scan QR-Code");
        setLocationRelativeTo(null);
        setVisible(true); 
        executor.execute(this);
    }//GEN-LAST:event_scanBtnActionPerformed

    private void checkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBtnActionPerformed
        try {
        String input = idTF.getText();
        Function f = new Function();
        ResultSet rs = f.find(input);

        if (rs.next()) {
//            equipTF.setText(rs.getString("EQUIPMENT"));
            statusTF.setText(rs.getString("STATUS"));
            useTF.setText(rs.getString("INUSE"));

            // Query borrowhistory to get the borrower name
            String borrowerQuery = "SELECT BORROWER FROM borrowhistory WHERE EQUIPMENT = ?";
            PreparedStatement borrowerPs = Myconnection.getConnection().prepareStatement(borrowerQuery);
            borrowerPs.setString(1, input);
            ResultSet borrowerRs = borrowerPs.executeQuery();

            if (borrowerRs.next()) {
                String borrowerName = borrowerRs.getString("BORROWER");
                nameTF.setText(borrowerName);
            } else {
                // No borrower found for this equipment
            }

            if ("Broken".equals(statusTF.getText())) {
                JOptionPane.showMessageDialog(null, "Equipment is either broken/in use.", "Can't be borrowed", JOptionPane.ERROR_MESSAGE);
            } else if ("Yes".equals(useTF.getText())) {
                returnBtn.setEnabled(true);
            } else {
                borrowBtn.setEnabled(true);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No data found.", "Scan your QR-Code", HEIGHT);
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace(); // Print stack trace for debugging
    }
    }//GEN-LAST:event_checkBtnActionPerformed

    private void returnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBtnActionPerformed
        nameTF.setText("N/A");
        String borrower = nameTF.getText();
        useTF.setText("No");
        String inuse= useTF.getText();
        String status = statusTF.getText();
        String equipment = equipTF.getText();
        String returned = "Returned";
        String srcode = eme;
        TimeZone.setDefault(TimeZone.getTimeZone("Asia/Manila"));
        Timestamp timestamp = new Timestamp(new Date().getTime());
        
                try{
                    String value = (idTF.getText().toString());
                    String query = "UPDATE `equipmentinventory` SET `BORROWER` = '"+ borrower + "', INUSE = '"+ inuse +"'  WHERE `equipmentinventory`.`ID` = '"+ value +"'";

                    PreparedStatement ps = Myconnection.getConnection().prepareStatement(query); 
                    if(ps.executeUpdate() !=0 ){
                        TimeZone manilaTimeZone = TimeZone.getTimeZone("Asia/Manila");
                    Calendar calendar = Calendar.getInstance(manilaTimeZone);
                    Timestamp pstTimestamp = new Timestamp(calendar.getTimeInMillis());
                    Calendar pstCalendar = Calendar.getInstance();
                    pstCalendar.setTimeInMillis(pstTimestamp.getTime());
                    pstCalendar.setTimeZone(manilaTimeZone);
                    Timestamp pstTimestampInManila = new Timestamp(pstCalendar.getTimeInMillis());
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    String date = sdf.format(pstTimestampInManila);
                        UIManager.put("OptionPane.okButtonText", "Ok");
                        JOptionPane.showMessageDialog(null, "Data has been updated!");
                        webcam.close();
                        String insertBorrowHistory = "INSERT INTO `borrowhistory` (`BORROWER`, `EQUIPMENT`, `SRCODE`, `DATE`, `BR/RT`) VALUES (?, ?, ?, ?, ?)";
                    PreparedStatement insertPs = Myconnection.getConnection().prepareStatement(insertBorrowHistory);
                    insertPs.setString(1, borrower); // Borrower SR goes into borrowhistory
                    insertPs.setString(2, equipment);
                    insertPs.setString(3, srcode);
                    insertPs.setString(4, date); // Insert current date/time
                    insertPs.setString(5, returned);
                    insertPs.executeUpdate();
                    }
        
                }catch (Exception ex){
                    JOptionPane.showMessageDialog(null, ex);
                    
                }
                
                
                
                StudentLogin login = new StudentLogin();
                login.setVisible(true);
                this.setVisible(false); 
    }//GEN-LAST:event_returnBtnActionPerformed

    private void availBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availBtnActionPerformed
        Available avail = new Available();
        avail.setVisible(true);
        this.setVisible(false); 
        webcam.close();// TODO add your handling code here:
    }//GEN-LAST:event_availBtnActionPerformed

    private void nameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTFActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    try {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                        Logger.getLogger(ReadQrcode.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
            }

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReadQrcode("").setVisible(true);
            }
        });
    }
    
    private void initWebcam(){
        
        Dimension size = WebcamResolution.QVGA.getSize();
        webcam = Webcam.getWebcams().get(0);
        webcam.setViewSize(size);
        
        panel = new WebcamPanel(webcam);
        panel.setPreferredSize(size);
        
        jPanel2.add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0,0,448,250));

        
    }
    
    @Override
    public void run(){
        setTitle("QR Code Scanner");
        setLocationRelativeTo(null);
        setVisible(true);
        do{
            try{
                Thread.sleep(100);
            }catch (InterruptedException ex){
                Logger.getLogger(ReadQrcode.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            Result result = null;
            BufferedImage image = null;
            
            if(webcam.isOpen()){
                if((image= webcam.getImage())== null){
                   continue; 
                }
            }
            LuminanceSource source = new BufferedImageLuminanceSource(image);
            BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
            
            try {
                result = new MultiFormatReader().decode(bitmap);
            } catch (NotFoundException ex) {
                java.util.logging.Logger.getLogger(ReadQrcode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            
            if(result != null){
                idTF.setText(result.getText());
            }
            Function f = new Function();
            ResultSet rs;
            String en = "EQUIPMENT";
            String name = "BORROWER";
            String stat = "STATUS";
            String inuse = "INUSE";
            String input = idTF.getText();
            
            
            try{
            rs = f.find(input);

            if (rs.next()){
                equipTF.setText(rs.getString(en));
                nameTF.setText(rs.getString(name));                
                statusTF.setText(rs.getString(stat));
                useTF.setText(rs.getString(inuse));
                checkBtn.setEnabled(true); 
                
                break;
            } else {
                UIManager.put("OptionPane.okButtonText", "Exit");
                JOptionPane.showMessageDialog(null, "No data found.", "Scan your QR-Code",HEIGHT);
                break;
            }
            
        } catch (Exception ex){
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
            
        }while(true);
        
    }
    
    public Thread newThread(Runnable r){
        Thread t = new Thread(r, "My Thread");
        t.setDaemon(true);
        return t;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton availBtn;
    private javax.swing.JButton borrowBtn;
    private javax.swing.JButton checkBtn;
    private javax.swing.JTextField equipTF;
    private javax.swing.JButton exitBtn;
    private javax.swing.JTextField idTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField nameTF;
    private javax.swing.JButton returnBtn;
    private javax.swing.JButton scanBtn;
    private javax.swing.JTextField statusTF;
    private javax.swing.JTextField useTF;
    // End of variables declaration//GEN-END:variables
}
