/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main.java;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.sql.*;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
/**
 *
 * @author Joshua Formento
 */
public class adminWindow extends javax.swing.JFrame {

    public boolean checkEquipment(String username) {
        PreparedStatement ps;
        ResultSet rs;
        boolean existingEquipment = false;
        String query = "SELECT * FROM equipmentinventory WHERE EQUIPMENT = ?";
        try {
            ps = Myconnection.getConnection().prepareStatement(query);
            ps.setString(1, username);
            rs = ps.executeQuery();

            if (rs.next()) {
                existingEquipment = true;
                JOptionPane.showMessageDialog(null, "This equipment already exits", "add an identifier on the Equipment name!",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Myconnection.class.getName()).log(Level.SEVERE, null, ex);
        }
        return existingEquipment;
    }

    public boolean verifyField() {
        String equipmentname = EQtf.getText();
        String borrower = BRtf.getText();
        String status = statTF.getText();
        String inuse= inuseTf.getText();


        if (equipmentname.trim().equals(" ") || borrower.trim().equals(" ")|| status.trim().equals(" ")|| inuse.trim().equals(" ")) {
            JOptionPane.showMessageDialog(null, "Some fields are empty!", "Make sure they are not empty!",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        } else {
            return true;
        }
    }
    
    public adminWindow(){
        initComponents();
        setLocationRelativeTo(null);
        TableColumnModel columnModel = table1.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(70);
        columnModel.getColumn(1).setPreferredWidth(150);
        columnModel.getColumn(2).setPreferredWidth(150);
        columnModel.getColumn(3).setPreferredWidth(150);
        columnModel.getColumn(4).setPreferredWidth(150);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

    /**
     * Creates new form adminWindow
     */
    }
    private void showcontent(){
        try{
            Connection conn = Myconnection.getConnection();
            Statement st = conn.createStatement();
            String query = "SELECT * FROM equipmentinventory";
            ResultSet rs = st.executeQuery(query);
            ResultSetMetaData rsm = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel) table1.getModel();

            int cols = rsm.getColumnCount();
            String [] colNAme = new String[cols];
            for(int i = 0; i<cols; i++){
                colNAme[i] = rsm.getColumnName(i+1);
                model.setColumnIdentifiers(colNAme);

                String ID, EQUIPMENT, BORROWER, STATUS, INUSE;
                while (rs.next()){
                    ID = rs.getString(1);
                    EQUIPMENT = rs.getString(2);
                    BORROWER = rs.getString(3);
                    STATUS = rs.getString(4);
                    INUSE = rs.getString(5);
                    String[] row = {ID, EQUIPMENT, BORROWER, STATUS, INUSE};
                    model.addRow(row);
                }
            }


        }catch (SQLException ex){
        }

    }

    private static void generateQRcode(String text,
        int width, int height, String filepath ) throws WriterException, IOException {

        QRCodeWriter qc = new QRCodeWriter();
        BitMatrix bm = qc.encode(text, BarcodeFormat.QR_CODE, width, height);
        Path probj = FileSystems.getDefault().getPath(filepath);

        try{
            MatrixToImageWriter.writeToPath(bm,"PNG", probj);
        } catch (IOException ex){
            Logger.getLogger(QRcodegen.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    public static void main(String[] args){


    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        recordBtn = new javax.swing.JButton();
        showBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        IDtf = new javax.swing.JTextField();
        EQtf = new javax.swing.JTextField();
        BRtf = new javax.swing.JTextField();
        statTF = new javax.swing.JTextField();
        inuseTf = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        newBtn.setBackground(new java.awt.Color(255, 255, 255));
        newBtn.setFont(new java.awt.Font("Quarion", 1, 16)); // NOI18N
        newBtn.setForeground(new java.awt.Color(0, 0, 0));
        newBtn.setText("New");
        newBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBtnActionPerformed(evt);
            }
        });
        getContentPane().add(newBtn);
        newBtn.setBounds(120, 520, 72, 29);

        updateBtn.setBackground(new java.awt.Color(255, 255, 255));
        updateBtn.setFont(new java.awt.Font("Quarion", 1, 16)); // NOI18N
        updateBtn.setForeground(new java.awt.Color(0, 0, 0));
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });
        getContentPane().add(updateBtn);
        updateBtn.setBounds(200, 520, 100, 29);

        recordBtn.setBackground(new java.awt.Color(255, 255, 255));
        recordBtn.setFont(new java.awt.Font("Quarion", 1, 16)); // NOI18N
        recordBtn.setForeground(new java.awt.Color(0, 0, 0));
        recordBtn.setText("Record");
        recordBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordBtnActionPerformed(evt);
            }
        });
        getContentPane().add(recordBtn);
        recordBtn.setBounds(610, 520, 100, 29);

        showBtn.setBackground(new java.awt.Color(255, 255, 255));
        showBtn.setFont(new java.awt.Font("Quarion", 1, 16)); // NOI18N
        showBtn.setForeground(new java.awt.Color(0, 0, 0));
        showBtn.setText("Show");
        showBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showBtnActionPerformed(evt);
            }
        });
        getContentPane().add(showBtn);
        showBtn.setBounds(310, 520, 90, 29);

        clearBtn.setBackground(new java.awt.Color(255, 255, 255));
        clearBtn.setFont(new java.awt.Font("Quarion", 1, 16)); // NOI18N
        clearBtn.setForeground(new java.awt.Color(0, 0, 0));
        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });
        getContentPane().add(clearBtn);
        clearBtn.setBounds(410, 520, 90, 29);

        deleteBtn.setBackground(new java.awt.Color(255, 255, 255));
        deleteBtn.setFont(new java.awt.Font("Quarion", 1, 16)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(0, 0, 0));
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        getContentPane().add(deleteBtn);
        deleteBtn.setBounds(510, 520, 90, 29);

        backBtn.setBackground(new java.awt.Color(255, 255, 255));
        backBtn.setFont(new java.awt.Font("Quarion", 1, 16)); // NOI18N
        backBtn.setForeground(new java.awt.Color(0, 0, 0));
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        getContentPane().add(backBtn);
        backBtn.setBounds(720, 520, 72, 29);

        exitBtn.setBackground(new java.awt.Color(255, 255, 255));
        exitBtn.setFont(new java.awt.Font("Quarion", 1, 16)); // NOI18N
        exitBtn.setForeground(new java.awt.Color(0, 0, 0));
        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });
        getContentPane().add(exitBtn);
        exitBtn.setBounds(800, 520, 72, 29);

        table1.setFont(new java.awt.Font("Proxima Nova Rg", 0, 12)); // NOI18N
        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "EQUIPMENT", "BORROWER", "STATUS", "IN USE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(table1);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(570, 280, 400, 190);

        jLabel2.setFont(new java.awt.Font("Bebas Neue", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("ID:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(100, 280, 19, 24);

        jLabel3.setFont(new java.awt.Font("Bebas Neue", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("equipment name:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(100, 320, 134, 24);

        jLabel4.setFont(new java.awt.Font("Bebas Neue", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("borrower:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(100, 360, 87, 24);

        jLabel5.setFont(new java.awt.Font("Bebas Neue", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("status:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(100, 400, 60, 24);

        jLabel6.setFont(new java.awt.Font("Bebas Neue", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("in use:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(100, 440, 51, 24);

        jLabel11.setFont(new java.awt.Font("BookmanOldStyleProCyrW04-Rg", 1, 44)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("BATANGAS STATE UNIVERSITY");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(255, 30, 740, 39);

        jLabel12.setFont(new java.awt.Font("BookmanOldStyleProCyrW04-Rg", 0, 26)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("The National Engineering University");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(385, 70, 480, 29);

        IDtf.setEditable(false);
        IDtf.setFont(new java.awt.Font("Proxima Nova Rg", 0, 14)); // NOI18N
        IDtf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDtfActionPerformed(evt);
            }
        });
        getContentPane().add(IDtf);
        IDtf.setBounds(260, 280, 290, 24);

        EQtf.setFont(new java.awt.Font("Proxima Nova Rg", 0, 14)); // NOI18N
        EQtf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EQtfActionPerformed(evt);
            }
        });
        getContentPane().add(EQtf);
        EQtf.setBounds(260, 320, 290, 24);

        BRtf.setFont(new java.awt.Font("Proxima Nova Rg", 0, 14)); // NOI18N
        BRtf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BRtfActionPerformed(evt);
            }
        });
        getContentPane().add(BRtf);
        BRtf.setBounds(260, 360, 290, 24);

        statTF.setFont(new java.awt.Font("Proxima Nova Rg", 0, 14)); // NOI18N
        statTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statTFActionPerformed(evt);
            }
        });
        getContentPane().add(statTF);
        statTF.setBounds(260, 400, 290, 24);

        inuseTf.setFont(new java.awt.Font("Proxima Nova Rg", 0, 14)); // NOI18N
        inuseTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inuseTfActionPerformed(evt);
            }
        });
        getContentPane().add(inuseTf);
        inuseTf.setBounds(260, 440, 290, 24);

        jLabel8.setFont(new java.awt.Font("Couture", 0, 30)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("ADMIN");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(588, 210, 110, 37);

        jLabel7.setFont(new java.awt.Font("Couture", 0, 35)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Laboratory Equipment Inventory ");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(283, 150, 720, 50);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/java/images/large.png"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1000, 560);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBtnActionPerformed
                String equipmentname = EQtf.getText();
                String borrower = BRtf.getText();
                String status = statTF.getText();
                String inuse= inuseTf.getText();
                UUID uniqueKey = UUID.randomUUID();

                PreparedStatement ps;

                if (verifyField()) {
                    if (!checkEquipment(equipmentname)) {
                    String update = "INSERT INTO equipmentinventory (ID, EQUIPMENT, BORROWER, STATUS, INUSE) VALUES (?, ? , ?, ?, ?)";
                    try {
                        ps = Myconnection.getConnection().prepareStatement(update);
                        ps.setString(1, String.valueOf(uniqueKey));
                        ps.setString(2, equipmentname);
                        ps.setString(3, borrower);
                        ps.setString(4, status);
                        ps.setString(5, inuse);

                        if (ps.executeUpdate() != 0){
                            JOptionPane.showMessageDialog(null,"Equipment has been recorded");
                        }
                        DefaultTableModel model = (DefaultTableModel) table1.getModel();
                        model.setRowCount(0);
                        showcontent();
                    } catch (SQLException ex) {
                        throw new RuntimeException(ex);
                    }
                    try{
                        generateQRcode(String.valueOf(uniqueKey),200, 200 ,
                                "D:\\Documents\\School\\QR\\" + uniqueKey + ".png" );
                    }catch (WriterException | IOException ex){
                    }
                    }
                }



            
        
    }//GEN-LAST:event_newBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
                String ID = IDtf.getText();;
                String borrower = BRtf.getText();
                String status = statTF.getText();
                String inuse= inuseTf.getText();
                try{
                    int row = table1.getSelectedRow();
                    String value = (table1.getModel().getValueAt(row, 0).toString());
                    String query = "UPDATE `equipmentinventory` SET `BORROWER` = '"+ borrower + "', STATUS = '"+ status +"' , INUSE = '"+ inuse +"'  WHERE `equipmentinventory`.`ID` = '"+ value +"'";

                    PreparedStatement ps = Myconnection.getConnection().prepareStatement(query);

                    if(ps.executeUpdate() !=0 ){
                        JOptionPane.showMessageDialog(null, "Data has been Updated!");
                    }
                    DefaultTableModel model = (DefaultTableModel) table1.getModel();
                    model.setRowCount(0);
                    showcontent();
                }catch (Exception ex){
                    JOptionPane.showMessageDialog(null, ex);
                }  
    }//GEN-LAST:event_updateBtnActionPerformed

    private void showBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showBtnActionPerformed
        try{
                    Connection conn = Myconnection.getConnection();
                    Statement st = conn.createStatement();
                    String query = "SELECT * FROM equipmentinventory";
                    ResultSet rs = st.executeQuery(query);
                    ResultSetMetaData rsm = rs.getMetaData();
                    DefaultTableModel model = (DefaultTableModel) table1.getModel();

                    int cols = rsm.getColumnCount();
                    String [] colNAme = new String[cols];
                    for(int i = 0; i<cols; i++){
                        colNAme[i] = rsm.getColumnName(i+1);
                        model.setColumnIdentifiers(colNAme);
                        TableColumnModel columnModel = table1.getColumnModel();
                        columnModel.getColumn(0).setPreferredWidth(70);
                        columnModel.getColumn(1).setPreferredWidth(155);
                        columnModel.getColumn(2).setPreferredWidth(145);
                        columnModel.getColumn(3).setPreferredWidth(130);
                        columnModel.getColumn(4).setPreferredWidth(130);
                        String ID, EQUIPMENT, BORROWER, STATUS, INUSE;
                        while (rs.next()){
                            ID = rs.getString(1);
                            EQUIPMENT = rs.getString(2);
                            BORROWER = rs.getString(3);
                            STATUS = rs.getString(4);
                            INUSE = rs.getString(5);
                            String[] row = {ID, EQUIPMENT, BORROWER, STATUS, INUSE};
                            model.addRow(row);
                        }
                    }


                }catch (Exception ex){
                   ex.printStackTrace();
                }    
    }//GEN-LAST:event_showBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        IDtf.setText(" ");
        EQtf.setText(" ");
        BRtf.setText(" ");
        statTF.setText(" ");
        inuseTf.setText(" ");
    }//GEN-LAST:event_clearBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        try{
            DefaultTableModel table = (DefaultTableModel)table1.getModel();
            TableColumnModel columnModel = table1.getColumnModel();
            columnModel.getColumn(0).setPreferredWidth(70);
            columnModel.getColumn(1).setPreferredWidth(155);
            columnModel.getColumn(2).setPreferredWidth(145);
            columnModel.getColumn(3).setPreferredWidth(130);
            columnModel.getColumn(4).setPreferredWidth(130);
            int row = table1.getSelectedRow();
            String value = (table1.getModel().getValueAt(row, 0).toString());
            String query = "DELETE FROM equipmentinventory WHERE `equipmentinventory`.`ID` = '"+value+ "'";
            PreparedStatement ps = Myconnection.getConnection().prepareStatement(query);
            ps.executeUpdate();

            DefaultTableModel model = (DefaultTableModel) table1.getModel();
            model.setRowCount(0);
            showcontent();

            JOptionPane.showMessageDialog(null, "Deleted successfully!");


            }catch (Exception exception){
                exception.printStackTrace();
            }        
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed

    private void IDtfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDtfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDtfActionPerformed

    private void EQtfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EQtfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EQtfActionPerformed

    private void BRtfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BRtfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BRtfActionPerformed

    private void statTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statTFActionPerformed

    private void inuseTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inuseTfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inuseTfActionPerformed

    private void table1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table1MouseClicked
        int i = table1.getSelectedRow();
        TableModel model = table1.getModel();
        IDtf.setText(model.getValueAt(i,0).toString());
        EQtf.setText(model.getValueAt(i,1).toString());
        BRtf.setText(model.getValueAt(i,2).toString());
        statTF.setText(model.getValueAt(i,3).toString());
        inuseTf.setText(model.getValueAt(i,4).toString());        // TODO add your handling code here:
    }//GEN-LAST:event_table1MouseClicked

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        new Welcome().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backBtnActionPerformed

    private void recordBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordBtnActionPerformed
        Record history = new Record();
        history.setVisible(true);
        this.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_recordBtnActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BRtf;
    private javax.swing.JTextField EQtf;
    private javax.swing.JTextField IDtf;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton exitBtn;
    private javax.swing.JTextField inuseTf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton newBtn;
    private javax.swing.JButton recordBtn;
    private javax.swing.JButton showBtn;
    private javax.swing.JTextField statTF;
    private javax.swing.JTable table1;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
